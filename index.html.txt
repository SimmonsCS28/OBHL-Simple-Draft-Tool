<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hockey League Draft Application</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #1a1a1a;
            color: #e0e0e0;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Top Menu */
        .top-menu {
            background-color: #2c3e50;
            color: white;
            padding: 10px 20px;
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .menu-button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }

        .menu-button:hover {
            background-color: #2980b9;
        }

        .menu-button:disabled {
            background-color: #95a5a6;
            cursor: not-allowed;
        }

        .menu-button.active {
            background-color: #27ae60;
        }

        .menu-input, .menu-select {
            padding: 8px;
            border: 1px solid #555;
            border-radius: 4px;
            font-size: 14px;
            background-color: #3a3a3a;
            color: #e0e0e0;
        }

        /* Main Container */
        .main-container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        /* Player Pool */
        .player-pool {
            width: 300px;
            background-color: #2a2a2a;
            border-right: 2px solid #444;
            display: flex;
            flex-direction: column;
        }

        .pool-header {
            background-color: #1a1a1a;
            color: white;
            padding: 15px;
            font-weight: bold;
            font-size: 16px;
        }

        .filter-section {
            padding: 15px;
            border-bottom: 1px solid #444;
        }

        .filter-row {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            gap: 10px;
        }

        .filter-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-bottom: 10px;
        }

        .filter-btn {
            padding: 5px 10px;
            background-color: #3a3a3a;
            border: 1px solid #555;
            color: #e0e0e0;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
        }

        .filter-btn:hover {
            background-color: #4a4a4a;
        }

        .filter-btn.active {
            background-color: #3498db;
            color: white;
            border-color: #2980b9;
        }

        .filter-select {
            flex: 1;
            padding: 6px;
            background-color: #3a3a3a;
            color: #e0e0e0;
            border: 1px solid #555;
            border-radius: 4px;
        }

        .sort-button {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 6px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
        }

        .sort-button:hover {
            background-color: #c0392b;
        }

        .players-container {
            flex: 1;
            overflow-y: auto;
            padding: 10px;
        }

        /* Player Card */
        .player-card {
            background-color: #3a3a3a;
            border: 1px solid #555;
            color: #e0e0e0;
            border-radius: 6px;
            padding: 10px;
            margin-bottom: 8px;
            cursor: grab;
            transition: all 0.2s;
            font-weight: bold;
        }

        .player-card:hover {
            background-color: #4a4a4a;
            transform: translateY(-1px);
        }

        .player-card.dragging {
            opacity: 0.5;
            cursor: grabbing;
        }

        .player-card.compact {
            padding: 6px 10px;
        }

        .player-card.compact .player-details {
            display: flex;
            gap: 10px;
            font-size: 11px;
        }

        .player-card.compact .player-detail:not(.show-compact) {
            display: none;
        }

        .player-name {
            font-weight: bold;
            font-size: 14px;
            margin-bottom: 4px;
        }

        .player-details {
            font-size: 12px;
            color: #aaa;
        }

        .player-detail {
            margin-bottom: 2px;
        }

        .player-tag {
            display: inline-block;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            font-weight: bold;
            margin-left: 5px;
        }

        .tag-ref {
            background-color: #f39c12;
            color: white;
        }

        .tag-gm {
            background-color: #8e44ad;
            color: white;
        }

        /* Draft Board */
        .draft-board {
            flex: 1;
            overflow-x: auto;
            padding: 20px;
            background-color: #222;
        }

        .teams-container {
            display: flex;
            gap: 15px;
            min-width: max-content;
        }

        .team-column {
            width: 220px;
            background-color: #2a2a2a;
            border: 2px solid #555;
            border-radius: 8px;
            min-height: 600px;
        }

        .team-header {
            padding: 10px;
            border-bottom: 2px solid #bdc3c7;
            font-weight: bold;
        }

        .team-color-row {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            gap: 8px;
        }

        .color-select {
            flex: 1;
            padding: 6px;
            border: 1px solid #555;
            border-radius: 4px;
            background-color: #3a3a3a;
            color: #e0e0e0;
        }

        .team-sort-select {
            padding: 4px;
            font-size: 11px;
            border: 1px solid #555;
            background-color: #3a3a3a;
            color: #e0e0e0;
            border-radius: 3px;
            margin-bottom: 5px;
            width: 100%;
        }

        .team-stats {
            font-size: 11px;
            font-weight: bold;
        }
        
        /* Ensure stats text inherits the header color for visibility */
        .team-header .team-stats {
            color: inherit;
            opacity: 0.9;
        }

        .stat-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2px;
        }

        .stat-row span:last-child {
            font-weight: bold;
        }

        .team-players {
            padding: 10px;
            min-height: 500px;
        }
        
        .team-players .player-card {
            font-weight: bold;
        }

        .team-players.drag-over {
            background-color: rgba(52, 152, 219, 0.1);
        }

        .drop-zone {
            min-height: 500px;
            border: 2px dashed #555;
            color: #999;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-style: italic;
            margin-top: 10px;
        }

        .drop-zone.drag-over {
            border-color: #3498db;
            background-color: #1a3d5c;
        }

        /* Updated Color Classes with better contrast */
        .team-red { background-color: #fb0102; color: #ffffff; }
        .team-blue { background-color: #0100fe; color: #ffffff; }
        .team-lt-blue { background-color: #5e9ed6; color: #ffffff; }
        .team-tan { background-color: #b8956f; color: #ffffff; }
        .team-black { background-color: #000000; color: #ffffff; }
        .team-orange { background-color: #fd9a01; color: #000000; }
        .team-green { background-color: #39751f; color: #ffffff; }
        .team-teal { background-color: #007a7a; color: #ffffff; }
        .team-maroon { background-color: #a64d79; color: #ffffff; }
        .team-gray { background-color: #666666; color: #ffffff; }
        .team-purple { background-color: #9a00ff; color: #ffffff; }
        .team-white { background-color: #f0f0f0; color: #000000; border: 2px solid #000; }

        .hidden {
            display: none;
        }

        .file-input {
            display: none;
        }

        .view-toggle {
            display: flex;
            gap: 5px;
            align-items: center;
        }

        .toggle-label {
            font-size: 12px;
            color: white;
        }
    </style>
</head>
<body>
    <!-- Top Menu -->
    <div class="top-menu">
        <button class="menu-button" id="startDraftBtn">Start Draft</button>
        <button class="menu-button" id="saveDraftBtn" disabled>Save Draft</button>
        <button class="menu-button" id="resetDraftBtn" disabled>Reset Draft</button>
        
        <select class="menu-select" id="numTeamsSelect">
            <option value="">Select Number of Teams</option>
            <option value="6">6 Teams</option>
            <option value="7">7 Teams</option>
            <option value="8">8 Teams</option>
            <option value="9">9 Teams</option>
            <option value="10">10 Teams</option>
            <option value="11">11 Teams</option>
            <option value="12">12 Teams</option>
        </select>
        
        <button class="menu-button" id="downloadTemplateBtn">Download Template</button>
        <button class="menu-button" id="uploadFileBtn">Upload File</button>
        <input type="file" id="fileInput" class="file-input" accept=".xlsx,.xls,.csv">
        
        <input type="text" class="menu-input" id="seasonNameInput" placeholder="Name of Season">
        
        <div class="view-toggle">
            <span class="toggle-label">Compact:</span>
            <button class="menu-button" id="toggleCompactBtn">OFF</button>
        </div>
    </div>

    <!-- Main Container -->
    <div class="main-container">
        <!-- Player Pool -->
        <div class="player-pool">
            <div class="pool-header">Player Pool</div>
            
            <div class="filter-section">
                <div class="filter-buttons">
                    <button class="filter-btn active" data-filter="all">All</button>
                    <button class="filter-btn" data-filter="forward">Forwards</button>
                    <button class="filter-btn" data-filter="defense">Defense</button>
                    <button class="filter-btn" data-filter="ref">Refs</button>
                    <button class="filter-btn" data-filter="gm">GMs</button>
                    <button class="filter-btn" data-filter="buddy">Has Buddy</button>
                </div>
                
                <div class="filter-row">
                    <select class="filter-select" id="sortBySelect">
                        <option value="name">Player Name</option>
                        <option value="position">Position</option>
                        <option value="skill">Skill Rating</option>
                        <option value="veteran">Veteran Status</option>
                    </select>
                    <button class="sort-button" id="sortBtn" data-order="asc">↑</button>
                </div>
            </div>
            
            <div class="players-container" id="playersContainer">
                <!-- Player cards will be populated here -->
            </div>
        </div>

        <!-- Draft Board -->
        <div class="draft-board">
            <div class="teams-container" id="teamsContainer">
                <!-- Team columns will be generated here -->
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let players = [];
        let teams = [];
        let currentSort = { by: 'name', order: 'asc' };
        let currentFilter = 'all';
        let draftStarted = false;
        let compactView = false;

        // Team colors
        const teamColors = [
            { value: 'red', label: 'Red', class: 'team-red' },
            { value: 'blue', label: 'Blue', class: 'team-blue' },
            { value: 'lt-blue', label: 'Lt. Blue', class: 'team-lt-blue' },
            { value: 'tan', label: 'Tan', class: 'team-tan' },
            { value: 'black', label: 'Black', class: 'team-black' },
            { value: 'orange', label: 'Orange', class: 'team-orange' },
            { value: 'green', label: 'Green', class: 'team-green' },
            { value: 'teal', label: 'Teal', class: 'team-teal' },
            { value: 'maroon', label: 'Maroon', class: 'team-maroon' },
            { value: 'gray', label: 'Gray', class: 'team-gray' },
            { value: 'purple', label: 'Purple', class: 'team-purple' },
            { value: 'white', label: 'White', class: 'team-white' }
        ];

        // Event listeners
        document.getElementById('downloadTemplateBtn').addEventListener('click', downloadTemplate);
        document.getElementById('uploadFileBtn').addEventListener('click', () => {
            document.getElementById('fileInput').click();
        });

        document.getElementById('fileInput').addEventListener('change', handleFileUpload);
        document.getElementById('startDraftBtn').addEventListener('click', startDraft);
        document.getElementById('saveDraftBtn').addEventListener('click', saveDraft);
        document.getElementById('resetDraftBtn').addEventListener('click', () => {
            console.log('Reset button clicked');
            // Add visual feedback since confirm dialog doesn't work in sandbox
            const resetBtn = document.getElementById('resetDraftBtn');
            const originalText = resetBtn.textContent;
            resetBtn.textContent = 'Resetting...';
            resetBtn.disabled = true;
            
            setTimeout(() => {
                resetDraft();
                resetBtn.textContent = originalText;
                resetBtn.disabled = false;
            }, 100);
        });
        document.getElementById('sortBtn').addEventListener('click', toggleSort);
        document.getElementById('sortBySelect').addEventListener('change', updateSort);
        
        // Compact view toggle
        document.getElementById('toggleCompactBtn').addEventListener('click', () => {
            compactView = !compactView;
            document.getElementById('toggleCompactBtn').textContent = compactView ? 'ON' : 'OFF';
            document.getElementById('toggleCompactBtn').classList.toggle('active', compactView);
            
            // Re-render all player cards
            renderPlayers();
            teams.forEach((team, index) => {
                renderTeamPlayers(index + 1);
            });
        });
        
        // Filter buttons
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                currentFilter = e.target.dataset.filter;
                renderPlayers();
            });
        });

        // Download template
        function downloadTemplate() {
            const templateData = [{
                'First Name': 'John',
                'Last Name': 'Smith',
                'Email': 'john.smith@example.com',
                'preferred position': 'Forward',
                'Skill Rating': '7',
                'Veteran Status': 'veteran',
                'Buddy Pick': '',
                'Ref': 'n',
                'GM': 'n'
            },
            {
                'First Name': 'Jane',
                'Last Name': 'Doe',
                'Email': 'jane.doe@example.com',
                'preferred position': 'Defense',
                'Skill Rating': '5',
                'Veteran Status': 'rookie',
                'Buddy Pick': '',
                'Ref': 'n',
                'GM': 'y'
            }];

            const worksheet = XLSX.utils.json_to_sheet(templateData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Player Template');
            
            // Set column widths for better readability
            worksheet['!cols'] = [
                { wch: 15 }, // First Name
                { wch: 15 }, // Last Name
                { wch: 25 }, // Email
                { wch: 15 }, // preferred position
                { wch: 12 }, // Skill Rating
                { wch: 15 }, // Veteran Status
                { wch: 15 }, // Buddy Pick
                { wch: 5 },  // Ref
                { wch: 5 }   // GM
            ];
            
            const filename = 'Hockey_Draft_Template.xlsx';
            XLSX.writeFile(workbook, filename);
        }

        // File upload handler
        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const workbook = XLSX.read(e.target.result, { type: 'binary' });
                    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
                    const data = XLSX.utils.sheet_to_json(firstSheet);
                    
                    players = data.map((row, index) => {
                        // Normalize position to either 'Forward' or 'Defense'
                        let position = row['preferred position'] || row['Position'] || 'Forward';
                        position = position.toString().toLowerCase().trim();
                        
                        if (position.includes('forward') || position === 'f') {
                            position = 'Forward';
                        } else if (position.includes('defense') || position.includes('defence') || position === 'd') {
                            position = 'Defense';
                        } else {
                            position = 'Forward'; // Default to Forward if unclear
                        }
                        
                        // Check for Ref and GM status
                        const isRef = (row['Ref'] || 'n').toString().toLowerCase() === 'y';
                        const isGM = (row['GM'] || 'n').toString().toLowerCase() === 'y';
                        
                        return {
                            id: index + 1,
                            firstName: row['First Name'] || '',
                            lastName: row['Last Name'] || '',
                            name: `${row['First Name'] || ''} ${row['Last Name'] || ''}`.trim(),
                            position: position,
                            skillRating: parseInt(row['Skill Rating']) || 5,
                            veteranStatus: row['Veteran Status'] || 'rookie',
                            buddyPick: row['Buddy Pick'] || '',
                            email: row['Email'] || '',
                            isRef: isRef,
                            isGM: isGM,
                            teamId: null
                        };
                    });
                    
                    renderPlayers();
                    console.log('File uploaded successfully! Loaded ' + players.length + ' players.');
                } catch (error) {
                    console.error('Error reading file:', error);
                }
            };
            reader.readAsBinaryString(file);
        }

        // Start draft
        function startDraft() {
            const numTeams = document.getElementById('numTeamsSelect').value;
            const seasonName = document.getElementById('seasonNameInput').value;
            
            if (!numTeams) {
                console.error('Please select the number of teams.');
                return;
            }
            
            if (!seasonName.trim()) {
                console.error('Please enter a season name.');
                return;
            }
            
            if (players.length === 0) {
                console.error('Please upload a player file first.');
                return;
            }

            // Initialize teams
            teams = [];
            for (let i = 0; i < parseInt(numTeams); i++) {
                teams.push({
                    id: i + 1,
                    color: 'white',
                    players: [],
                    sortBy: 'default'
                });
            }

            generateTeamColumns();
            
            // Initialize team players display and drop zones
            teams.forEach((team, index) => {
                renderTeamPlayers(index + 1);
                updateTeamStats(index + 1);
            });
            
            updateColorDropdowns(); // Initialize color dropdown states
            draftStarted = true;
            updateButtonStates();
            
            console.log('Draft started with ' + numTeams + ' teams for season: ' + seasonName);
        }

        // Update color dropdowns to prevent duplicates - FIXED VERSION
        function updateColorDropdowns() {
            const selectedColors = teams.map(team => team.color);
            
            // Update each team's color dropdown
            teams.forEach(team => {
                const colorSelect = document.querySelector(`[data-team-id="${team.id}"]`);
                if (!colorSelect) return;
                
                const currentValue = colorSelect.value || team.color;
                
                // Clear and repopulate options
                colorSelect.innerHTML = '';
                
                teamColors.forEach(color => {
                    // Include the color if it's not selected by another team, or if it's this team's current selection
                    if (!selectedColors.includes(color.value) || color.value === currentValue) {
                        const option = document.createElement('option');
                        option.value = color.value;
                        option.textContent = color.label;
                        option.selected = color.value === currentValue;
                        colorSelect.appendChild(option);
                    }
                });
                
                // IMPORTANT FIX: Reapply the color class to the header after updating dropdown
                const teamColumn = colorSelect.closest('.team-column');
                const header = teamColumn.querySelector('.team-header');
                const colorClass = teamColors.find(c => c.value === currentValue).class;
                header.className = `team-header ${colorClass}`;
            });
        }

        // Generate team columns
        function generateTeamColumns() {
            const container = document.getElementById('teamsContainer');
            container.innerHTML = '';

            teams.forEach(team => {
                const teamColumn = document.createElement('div');
                teamColumn.className = 'team-column';
                teamColumn.innerHTML = `
                    <div class="team-header">
                        <div class="team-color-row">
                            <select class="color-select" data-team-id="${team.id}">
                                ${teamColors.map(color => 
                                    `<option value="${color.value}" ${team.color === color.value ? 'selected' : ''}>${color.label}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <select class="team-sort-select" data-team-id="${team.id}">
                            <option value="default">Sort: Default</option>
                            <option value="rating-high">Rating: High to Low</option>
                            <option value="rating-low">Rating: Low to High</option>
                            <option value="position">Position</option>
                            <option value="position-rating">Position + Rating</option>
                        </select>
                        <div class="team-stats">
                            <div class="stat-row">
                                <span>Forwards:</span>
                                <span class="forwards-count">0</span>
                            </div>
                            <div class="stat-row">
                                <span>Defense:</span>
                                <span class="defense-count">0</span>
                            </div>
                            <div class="stat-row">
                                <span>Avg Fwd Rating:</span>
                                <span class="avg-fwd-rating">0.0</span>
                            </div>
                            <div class="stat-row">
                                <span>Avg Def Rating:</span>
                                <span class="avg-def-rating">0.0</span>
                            </div>
                            <div class="stat-row">
                                <span>Total Skill:</span>
                                <span class="total-skill">0</span>
                            </div>
                            <div class="stat-row">
                                <span>Avg Rating:</span>
                                <span class="avg-rating">0.0</span>
                            </div>
                        </div>
                    </div>
                    <div class="team-players" data-team-id="${team.id}">
                        <div class="drop-zone">Drop players here</div>
                    </div>
                `;

                // Add color change event listener
                const colorSelect = teamColumn.querySelector('.color-select');
                colorSelect.addEventListener('change', (e) => {
                    const teamId = parseInt(e.target.dataset.teamId);
                    const color = e.target.value;
                    const colorClass = teamColors.find(c => c.value === color).class;
                    
                    // Update team data
                    teams[teamId - 1].color = color;
                    
                    // Update header styling
                    const header = teamColumn.querySelector('.team-header');
                    header.className = `team-header ${colorClass}`;
                    
                    // Update all color dropdowns to prevent duplicates
                    updateColorDropdowns();
                });
                
                // Add sort change event listener
                const sortSelect = teamColumn.querySelector('.team-sort-select');
                sortSelect.addEventListener('change', (e) => {
                    const teamId = parseInt(e.target.dataset.teamId);
                    teams[teamId - 1].sortBy = e.target.value;
                    renderTeamPlayers(teamId);
                });

                // Set initial color and apply styling
                const initialColor = teamColors.find(c => c.value === team.color);
                const header = teamColumn.querySelector('.team-header');
                header.className = `team-header ${initialColor.class}`;
                
                // Set the dropdown to the correct initial value
                colorSelect.value = team.color;

                // Add drop zone event listeners to team players area
                const teamPlayersDiv = teamColumn.querySelector('.team-players');
                teamPlayersDiv.addEventListener('dragover', handleDragOver);
                teamPlayersDiv.addEventListener('dragleave', handleDragLeave);
                teamPlayersDiv.addEventListener('drop', handleDrop);

                container.appendChild(teamColumn);
            });
        }

        // Filter players based on current filter
        function filterPlayers(playersList) {
            switch (currentFilter) {
                case 'forward':
                    return playersList.filter(p => p.position === 'Forward');
                case 'defense':
                    return playersList.filter(p => p.position === 'Defense');
                case 'ref':
                    return playersList.filter(p => p.isRef);
                case 'gm':
                    return playersList.filter(p => p.isGM);
                case 'buddy':
                    return playersList.filter(p => p.buddyPick);
                default:
                    return playersList;
            }
        }

        // Render players in the pool
        function renderPlayers() {
            const container = document.getElementById('playersContainer');
            let poolPlayers = players.filter(player => player.teamId === null);
            
            // Apply filter
            poolPlayers = filterPlayers(poolPlayers);
            
            // Sort players
            const sortedPlayers = [...poolPlayers].sort((a, b) => {
                let comparison = 0;
                
                switch (currentSort.by) {
                    case 'name':
                        comparison = a.lastName.toLowerCase().localeCompare(b.lastName.toLowerCase());
                        break;
                    case 'position':
                        // First sort by position (Defense then Forward)
                        comparison = a.position.localeCompare(b.position);
                        // If positions are the same, sort by skill rating (highest first)
                        if (comparison === 0) {
                            comparison = b.skillRating - a.skillRating;
                        }
                        break;
                    case 'skill':
                        comparison = a.skillRating - b.skillRating;
                        break;
                    case 'veteran':
                        comparison = a.veteranStatus.localeCompare(b.veteranStatus);
                        break;
                }
                
                return currentSort.order === 'asc' ? comparison : -comparison;
            });

            container.innerHTML = '';
            sortedPlayers.forEach(player => {
                const playerCard = createPlayerCard(player);
                container.appendChild(playerCard);
            });
        }

        // Create player card element
        function createPlayerCard(player) {
            const playerCard = document.createElement('div');
            playerCard.className = `player-card ${compactView ? 'compact' : ''}`;
            playerCard.draggable = true;
            playerCard.dataset.playerId = player.id;
            
            let tags = '';
            if (player.isRef) tags += '<span class="player-tag tag-ref">REF</span>';
            if (player.isGM) tags += '<span class="player-tag tag-gm">GM</span>';
            
            if (compactView) {
                playerCard.innerHTML = `
                    <div class="player-name">${player.name}${tags}</div>
                    <div class="player-details">
                        <div class="player-detail show-compact">${player.position}</div>
                        <div class="player-detail show-compact">Skill: ${player.skillRating}</div>
                    </div>
                `;
            } else {
                playerCard.innerHTML = `
                    <div class="player-name">${player.name}${tags}</div>
                    <div class="player-details">
                        <div class="player-detail">Position: ${player.position}</div>
                        <div class="player-detail">Skill: ${player.skillRating}</div>
                        <div class="player-detail">Status: ${player.veteranStatus}</div>
                        ${player.buddyPick ? `<div class="player-detail">Buddy: ${player.buddyPick}</div>` : ''}
                    </div>
                `;
            }

            playerCard.addEventListener('dragstart', handleDragStart);
            playerCard.addEventListener('dragend', handleDragEnd);
            
            return playerCard;
        }

        // Sort team players
        function sortTeamPlayers(teamPlayers, sortBy) {
            return [...teamPlayers].sort((a, b) => {
                switch (sortBy) {
                    case 'rating-high':
                        return b.skillRating - a.skillRating;
                    case 'rating-low':
                        return a.skillRating - b.skillRating;
                    case 'position':
                        return a.position.localeCompare(b.position);
                    case 'position-rating':
                        const posComp = a.position.localeCompare(b.position);
                        return posComp !== 0 ? posComp : b.skillRating - a.skillRating;
                    default:
                        return 0; // Keep original order
                }
            });
        }

        // Drag and drop handlers
        function handleDragStart(e) {
            e.dataTransfer.setData('text/plain', e.target.dataset.playerId);
            e.target.classList.add('dragging');
        }

        function handleDragEnd(e) {
            e.target.classList.remove('dragging');
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.currentTarget.classList.add('drag-over');
        }

        function handleDragLeave(e) {
            // Only remove drag-over if we're actually leaving the element, not just moving to a child
            if (!e.currentTarget.contains(e.relatedTarget)) {
                e.currentTarget.classList.remove('drag-over');
            }
        }

        function handleDrop(e) {
            e.preventDefault();
            e.currentTarget.classList.remove('drag-over');
            
            const playerId = parseInt(e.dataTransfer.getData('text/plain'));
            const teamId = parseInt(e.currentTarget.dataset.teamId);
            
            movePlayerToTeam(playerId, teamId);
        }

        // Move player to team - FIXED VERSION
        function movePlayerToTeam(playerId, teamId) {
            const player = players.find(p => p.id === playerId);
            if (!player) return;

            let previousTeamId = player.teamId;

            // Remove from current team if any
            if (player.teamId !== null) {
                const currentTeam = teams[player.teamId - 1];
                currentTeam.players = currentTeam.players.filter(p => p.id !== playerId);
                updateTeamStats(player.teamId);
            }

            // Add to new team
            player.teamId = teamId;
            if (teamId !== null) {
                teams[teamId - 1].players.push(player);
                updateTeamStats(teamId);
            }

            // Re-render player pool
            renderPlayers();
            
            // Re-render affected team columns
            if (previousTeamId !== null) {
                renderTeamPlayers(previousTeamId);
            }
            if (teamId !== null) {
                renderTeamPlayers(teamId);
            }
            
            // FIX: DO NOT call updateColorDropdowns() here as it was causing the color loss
            // The colors are already set and don't need updating when moving players
        }

        // Render team players - FIXED VERSION
        function renderTeamPlayers(teamId) {
            const teamPlayersDiv = document.querySelector(`.team-players[data-team-id="${teamId}"]`);
            if (!teamPlayersDiv) return;

            const team = teams[teamId - 1];
            teamPlayersDiv.innerHTML = '';
            
            // Sort team players based on team's sort setting
            const sortedPlayers = sortTeamPlayers(team.players, team.sortBy);

            sortedPlayers.forEach(player => {
                const playerCard = createPlayerCard(player);
                playerCard.addEventListener('dblclick', () => movePlayerToTeam(player.id, null));
                teamPlayersDiv.appendChild(playerCard);
            });

            if (team.players.length === 0) {
                const dropZone = document.createElement('div');
                dropZone.className = 'drop-zone';
                dropZone.textContent = 'Drop players here';
                teamPlayersDiv.appendChild(dropZone);
            }
            
            // FIX: Re-attach drag and drop event listeners after re-rendering
            teamPlayersDiv.addEventListener('dragover', handleDragOver);
            teamPlayersDiv.addEventListener('dragleave', handleDragLeave);
            teamPlayersDiv.addEventListener('drop', handleDrop);
        }

        // Update team stats
        function updateTeamStats(teamId) {
            const team = teams[teamId - 1];
            const forwards = team.players.filter(p => p.position === 'Forward');
            const defense = team.players.filter(p => p.position === 'Defense');
            
            const forwardCount = forwards.length;
            const defenseCount = defense.length;
            
            const totalSkill = team.players.reduce((sum, p) => sum + p.skillRating, 0);
            const avgRating = team.players.length > 0 
                ? (totalSkill / team.players.length).toFixed(1)
                : '0.0';
            
            const avgFwdRating = forwards.length > 0
                ? (forwards.reduce((sum, p) => sum + p.skillRating, 0) / forwards.length).toFixed(1)
                : '0.0';
            
            const avgDefRating = defense.length > 0
                ? (defense.reduce((sum, p) => sum + p.skillRating, 0) / defense.length).toFixed(1)
                : '0.0';

            const teamColumn = document.querySelector(`.team-players[data-team-id="${teamId}"]`).closest('.team-column');
            teamColumn.querySelector('.forwards-count').textContent = forwardCount;
            teamColumn.querySelector('.defense-count').textContent = defenseCount;
            teamColumn.querySelector('.total-skill').textContent = totalSkill;
            teamColumn.querySelector('.avg-rating').textContent = avgRating;
            teamColumn.querySelector('.avg-fwd-rating').textContent = avgFwdRating;
            teamColumn.querySelector('.avg-def-rating').textContent = avgDefRating;
        }

        // Sort functions
        function toggleSort() {
            currentSort.order = currentSort.order === 'asc' ? 'desc' : 'asc';
            document.getElementById('sortBtn').textContent = currentSort.order === 'asc' ? '↑' : '↓';
            renderPlayers();
        }

        function updateSort() {
            currentSort.by = document.getElementById('sortBySelect').value;
            renderPlayers();
        }

        // Save draft
        function saveDraft() {
            const seasonName = document.getElementById('seasonNameInput').value;
            const data = [];

            teams.forEach(team => {
                const colorLabel = teamColors.find(c => c.value === team.color).label;
                team.players.forEach(player => {
                    data.push({
                        'Team': colorLabel,
                        'First Name': player.firstName,
                        'Last Name': player.lastName,
                        'Email': player.email,
                        'preferred position': player.position,
                        'Skill Rating': player.skillRating,
                        'Veteran Status': player.veteranStatus,
                        'Buddy Pick': player.buddyPick,
                        'Ref': player.isRef ? 'y' : 'n',
                        'GM': player.isGM ? 'y' : 'n'
                    });
                });
            });

            const worksheet = XLSX.utils.json_to_sheet(data);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Draft Results');
            
            const filename = `${seasonName}_Draft_${new Date().toISOString().split('T')[0]}.xlsx`;
            XLSX.writeFile(workbook, filename);
        }

        // Reset draft
        function resetDraft() {
            // Note: In sandboxed environment, confirm/alert dialogs don't work
            // For production, you might want to implement a custom confirmation modal
            
            console.log('Resetting draft...');
            console.log('Before reset - players with teams:', players.filter(p => p.teamId !== null).length);
            console.log('Teams before reset:', teams.map(t => ({id: t.id, players: t.players.length})));
            
            // Reset all players to pool
            for (let i = 0; i < players.length; i++) {
                players[i].teamId = null;
            }
            
            // Store the number of teams
            const numTeams = teams.length;
            
            // Reset teams array completely
            teams = [];
            for (let i = 0; i < numTeams; i++) {
                teams.push({
                    id: i + 1,
                    color: 'white',
                    players: [],
                    sortBy: 'default'
                });
            }
            
            console.log('After reset - players with teams:', players.filter(p => p.teamId !== null).length);
            console.log('Teams after reset:', teams.map(t => ({id: t.id, players: t.players.length})));
            
            // Force complete UI refresh
            generateTeamColumns();
            
            // Initialize team displays
            teams.forEach((team, index) => {
                renderTeamPlayers(index + 1);
                updateTeamStats(index + 1);
            });
            
            // Re-render player pool
            renderPlayers();
            
            // Update color dropdowns
            updateColorDropdowns();
            
            console.log('Draft reset complete - UI should be updated');
        }

        // Update button states
        function updateButtonStates() {
            const saveBtn = document.getElementById('saveDraftBtn');
            const resetBtn = document.getElementById('resetDraftBtn');
            
            saveBtn.disabled = !draftStarted;
            resetBtn.disabled = !draftStarted;
            
            console.log('Draft started:', draftStarted, 'Reset button disabled:', resetBtn.disabled);
        }

        // Add player pool drop zone
        const playersContainer = document.getElementById('playersContainer');
        playersContainer.addEventListener('dragover', handleDragOver);
        playersContainer.addEventListener('dragleave', handleDragLeave);
        playersContainer.addEventListener('drop', (e) => {
            e.preventDefault();
            e.currentTarget.classList.remove('drag-over');
            
            const playerId = parseInt(e.dataTransfer.getData('text/plain'));
            movePlayerToTeam(playerId, null);
        });
    </script>
</body>
</html>